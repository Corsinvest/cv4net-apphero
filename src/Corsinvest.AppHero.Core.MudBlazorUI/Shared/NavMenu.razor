@*
 * SPDX-FileCopyrightText: Copyright Corsinvest Srl
 * SPDX-License-Identifier: AGPL-3.0-only
*@
@inherits AHComponentBase

<MudNavMenu Dense Margin="Margin.Dense" Color="Color.Primary">
    <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">@L["Home"]</MudNavLink>

    @foreach (var category in ModularityService.GetCategories().OrderBy(a => a))
    {
        if (Authorizations.Any(a => a.Module.Category == category))
        {
            <MudNavGroup Title="@L[category]" Icon="@ModularityService.ToMBIcon(category)">
                @foreach (var item in GetByCategory(category))
                {
                    @RenderLinkModule(item.Key.Link!, item.SelectMany(a => a.Links))
                }
            </MudNavGroup>

        }
    }
</MudNavMenu>

@code
{
    private RenderFragment RenderLinkModule(ModuleLink link, IEnumerable<ModuleLink> authLinks) => __builder =>
    {
        @if (link.Child.Any())
        {
            <MudNavGroup Icon="@link.ToMBIcon()" IconColor="@link.IconColor.ToMBColor()" Title="@link.Text" Disabled="@(!link.Enabled)">
                @foreach (var item in link.Child.Where(a => authLinks.Contains(a)).OrderBy(a => a.Order).ThenBy(a => a.Text))
                {
                    @RenderLinkModule(item, authLinks)
                }
            </MudNavGroup>
        }
        else
        {
            <MudNavLink Href="@link.RealUrl"
            Icon="@link.ToMBIcon()"
            IconColor="@link.IconColor.ToMBColor()"
            Match="NavLinkMatch.All"
            Target="@(link.IsExternal ? "_blank" : null)"
            Disabled="@(!link.Enabled)">
                @link.Text
            </MudNavLink>
        }
    };
}