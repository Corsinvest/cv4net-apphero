@*
 * SPDX-FileCopyrightText: Copyright Corsinvest Srl
 * SPDX-License-Identifier: AGPL-3.0-only
*@
@inherits AHModuleOptionsBase<AppOptions>

<MudForm @bind-IsValid="@IsValid" @bind-Errors="@Errors">
    <MudTabs Elevation="1" ApplyEffectsToContainer Border>
        <Header>
            <AHPermissionButton Permission="Corsinvest.AppHero.Core.Options.Module.Permissions.Save" Disabled="@(!IsValid)"
                                Variant="Variant.Filled" OnClick="@OnSaveAsync" Style="margin:10px" Size="Size.Small" />
        </Header>
        <ChildContent>
            <MudTabPanel Text="@L["Service"]" Icon="@Icons.Material.Filled.Settings">
                <MudTabs Elevation="1" ApplyEffectsToContainer Border>
                    @* Services not grouped *@
                    <MudTabPanel Text="@L["General"]" Icon="@Icons.Material.Filled.Folder">
                        @RenderOptionsModules(Modules.IsType(ModuleType.Service).NotImplements<IGroupableService>())
                    </MudTabPanel>

                    @* Services grouped *@
                    @foreach (var item in Modules.Implements<IGroupableService>().GroupBy(a => ((IGroupableService)a).GetGroupName()).OrderBy(a => a.Key))
                    {
                        var group = (IGroupableService)item.ToArray()[0];
                        <MudTabPanel Text="@L[group.GetGroupName()]" Icon="@group.ToMBIcon()">
                            @RenderOptionsModules(item)
                        </MudTabPanel>
                    }
                </MudTabs>
            </MudTabPanel>

            <MudTabPanel Text="@L["Apps"]" Icon="@Icons.Material.Filled.Apps">
                @RenderOptionsModules(Modules.IsType(ModuleType.Application).IsEnabled().OrderBy(a=> a.Description))
            </MudTabPanel>
        </ChildContent>
    </MudTabs>
</MudForm>

@code
{
    private RenderFragment RenderOptionsModules(IEnumerable<ModuleBase> modules) => __builder =>
    {
        @if (ExpansionPanels)
        {
            <MudExpansionPanels>
                @foreach (var module in modules)
                {
                    OptionsComponents.TryAdd(module.Class, null!);

                    <MudExpansionPanel>
                        <TitleContent>
                            <div class="d-flex gap-4">
                                <MudIcon Icon="@module.ToMBIcon()" />
                                <MudText>@L[@module.Description]</MudText>
                            </div>
                        </TitleContent>

                        <ChildContent>
                            <DynamicComponent @ref="@OptionsComponents[module.Class]" Type="@module.Options!.Render" />
                        </ChildContent>
                    </MudExpansionPanel>
                }
            </MudExpansionPanels>
        }
        else
        {
            <MudTabs>
                @foreach (var module in modules)
                {
                    OptionsComponents.TryAdd(module.Class, null!);

                    <MudTabPanel IsPreRendered Text="@L[module.Description]" Icon="@module.ToMBIcon()">
                        <br />
                        <DynamicComponent @ref="@OptionsComponents[module.Class]" Type="module.Options!.Render" />
                    </MudTabPanel>
                }
            </MudTabs>
        }
    };
}